#  Copyright (C) 2022 4Soft GmbH
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU Lesser General Public License as
#  published by the Free Software Foundation, either version 2.1 of the
#  License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#  GNU General Lesser Public License for more details.
#
#  You should have received a copy of the GNU General Lesser Public
#  License along with this program. If not, see
#  http://www.gnu.org/licenses/lgpl-2.1.html.

openapi: 3.0.3

info:
  title: "@project.description@"
  version: "@project.version@"

paths:
  /3d/bordnet:
    summary: REST-Api call for getting the reference 3d JSON file.
    parameters:
      - name: param
        in: query
        description: map of strings
        required: false
        style: form
        explode: true
        schema:
          type: object
          additionalProperties:
            type: string
    get:
      tags:
        - Bordnet
      summary: Generation of bordnet for 3D display.
      operationId: bordnet
      responses:
        200:
          description: Returns a bordnet.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bordnet"

components:
  schemas:
    Graphic:
      type: object
      required:
        - partNumber
        - data
      properties:
        partNumber:
          type: string
        data:
          type: string

    Point:
      type: object
      required:
        - x
        - y
        - z
      properties:
        x:
          type: number
          format: double
        y:
          type: number
          format: double
        z:
          type: number
          format: double

    Rotation:
      type: object
      required:
        - matrix
      properties:
        matrix:
          type: array
          items:
            type: number
            format: double

    ViewProperties:
      type: object
      additionalProperties:
        type: string

    Bordnet:
      type: object
      required:
        - harnesses
      properties:
        harnesses:
          type: array
          items:
            $ref: "#/components/schemas/Harness"

    Harness:
      type: object
      required:
        - id
        - occurrences
        - nodes
        - segments
        - buildingBlocks
      properties:
        id:
          type: string
        occurrences:
          type: array
          items:
            $ref: "#/components/schemas/Occurrence"
        nodes:
          type: array
          items:
            $ref: "#/components/schemas/Node"
        segments:
          type: array
          items:
            $ref: "#/components/schemas/Segment"
        buildingBlocks:
          type: array
          items:
            $ref: "#/components/schemas/BuildingBlock"
        graphics:
          type: array
          items:
            $ref: "#/components/schemas/Graphic"

    BuildingBlock:
      type: object
      required:
        - id
      properties:
        id:
          type: string
        position:
          $ref: "#/components/schemas/Point"
        rotation:
          $ref: "#/components/schemas/Rotation"

    Node:
      type: object
      required:
        - id
        - position
        - buildingBlockId
      properties:
        id:
          type: string
        position:
          $ref: "#/components/schemas/Point"
        buildingBlockId:
          type: string
        viewProperties:
          $ref: "#/components/schemas/ViewProperties"

    Segment:
      type: object
      required:
        - id
        - curves
        - startNodeId
        - endNodeId
        - buildingBlockId
      properties:
        id:
          type: string
        virtualLength:
          type: number
          format: double
        crossSectionArea:
          type: number
          format: double
        curves:
          type: array
          items:
            $ref: "#/components/schemas/Curve"
        startNodeId:
          type: string
        endNodeId:
          type: string
        buildingBlockId:
          type: string
        viewProperties:
          $ref: "#/components/schemas/ViewProperties"

    Curve:
      type: object
      required:
        - degree
        - controlPoints
      properties:
        degree:
          type: integer
        controlPoints:
          type: array
          items:
            $ref: "#/components/schemas/Point"
        knots:
          type: array
          items:
            type: number
            format: double

    Occurrence:
      type: object
      required:
        - id
        - partType
        - buildingBlockId
      properties:
        id:
          type: string
        partType:
          $ref: "#/components/schemas/PartType"
        partNumber:
          type: string
        numberOfCavities:
          type: integer
        overrideDefaultColor:
          type: integer
        placement:
          $ref: "#/components/schemas/Placement"
        graphicPosition:
          $ref: "#/components/schemas/Point"
        rotation:
          $ref: "#/components/schemas/Rotation"
        buildingBlockId:
          type: string
        viewProperties:
          $ref: "#/components/schemas/ViewProperties"

    PartType:
      type: string
      enum:
        - "Connector"
        - "Protection"
        - "Fixing"
        - "Other"

    Placement:
      type: object
      discriminator:
        propertyName: placementType
      properties:
        id:
          type: string

    OnPointPlacement:
      type: object
      required:
        - locations
      properties:
        locations:
          type: array
          items:
            $ref: "#/components/schemas/Location"
      allOf:
        - $ref: "#/components/schemas/Placement"

    OnWayPlacement:
      type: object
      required:
        - segmentPath
        - startLocation
        - endLocation
      properties:
        segmentPath:
          type: array
          items:
            type: string
        startLocation:
          $ref: "#/components/schemas/Location"
        endLocation:
          $ref: "#/components/schemas/Location"
      allOf:
        - $ref: "#/components/schemas/Placement"

    Location:
      type: object
      discriminator:
        propertyName: locationType
      properties:
        id:
          type: string

    NodeLocation:
      type: object
      required:
        - nodeId
      properties:
        nodeId:
          type: string
      allOf:
        - $ref: "#/components/schemas/Location"

    SegmentLocation:
      type: object
      required:
        - segmentId
        - anchor
        - segmentOffsetLength
      properties:
        segmentId:
          type: string
        anchor:
          $ref: "#/components/schemas/Anchor"
        segmentOffsetLength:
          type: number
          format: double
      allOf:
        - $ref: "#/components/schemas/Location"

    Anchor:
      type: string
      enum:
        - "FromStartNode"
        - "FromEndNode"
